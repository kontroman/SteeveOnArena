#if UNITY_EDITOR
#if GASKELLGAMES
using System.Collections.Generic;
using UnityEngine;

namespace Gaskellgames.FolderSystem.EditorOnly
{
    /// <summary>
    /// Code created by Gaskellgames
    /// </summary>

    [CreateAssetMenu(fileName = "FolderIconSettings", menuName = "Gaskellgames/Folder System/FolderIconSettings")]
    public class FolderIconSettings_SO : GgScriptableObject
    {
        #region Variables

        internal enum SelectedState
        {
            Off,
            AutoGenerated,
            UserGenerated
        }
        
        [SerializeField, ReadOnly]
        private SelectedState projectFolderState = SelectedState.AutoGenerated;
        
        internal SelectedState ProjectFolderState
        {
            get => projectFolderState;
            set
            {
                projectFolderState = value;
                CreateFolderIconDictionary();
            }
        }

        [SerializeField, ReadOnly]
        private SerializedDictionary<string, Texture> userGeneratedLinks;
        
        internal Dictionary<string, Texture> folderIconDictionary { get; private set; }

        #endregion
        
        //----------------------------------------------------------------------------------------------------

        #region Internal Functions

        internal void Initialise()
        {
            ProjectFolderIconAssetPostprocessor.AutoGenerateIconDictionary();
            CleanUserGeneratedLinks();
            CreateFolderIconDictionary();
        }

        internal void ResetUserGeneratedLinks()
        {
            ProjectFolderIconAssetPostprocessor.AutoGenerateIconDictionary();
            userGeneratedLinks = new SerializedDictionary<string, Texture>(ProjectFolderIconAssetPostprocessor.autoGeneratedIconDictionary);
        }

        internal void CleanUserGeneratedLinks()
        {
            userGeneratedLinks.Initialise();
            userGeneratedLinks.ClearInvalidEntries();
        }

        internal bool TryAddToUserGeneratedLinks(string key, Texture value)
        {
            return userGeneratedLinks.TryAdd(key, value);
        }

        internal bool RemoveFromUserGeneratedLinks(string key)
        {
            return userGeneratedLinks.Remove(key);
        }

        internal bool TryGetKeysForValue(Texture image, out List<string> keys)
        {
            return userGeneratedLinks.TryGetKeysForValue(image, out keys);
        }
        
        internal void CreateFolderIconDictionary()
        {
            folderIconDictionary = new Dictionary<string, Texture>();
            switch (projectFolderState)
            {
                case SelectedState.AutoGenerated:
                    ProjectFolderIconAssetPostprocessor.AutoGenerateIconDictionary();
                    folderIconDictionary = ProjectFolderIconAssetPostprocessor.autoGeneratedIconDictionary;
                    break;
                
                case SelectedState.UserGenerated:
                    folderIconDictionary = userGeneratedLinks.ToDictionary();
                    break;
                
                case SelectedState.Off:
                default:
                    break;
            }
        }

        #endregion
        
    } // class end
}
#endif
#endif